{"version":3,"sources":["components/Card/index.js","components/ScoreBoard/index.js","components/Title/index.js","components/Wrapper/index.js","components/Directions/index.js","App.js","index.js"],"names":["Card","props","react_default","a","createElement","className","onClick","cardClicked","id","alt","name","src","image","ScoreBoard","children","Title","Wrapper","Directions","App","state","simpsons","count","simpsonsClicked","_this","setState","map","sim","clicked","restartGame","shuffle","alert","array","shuffleArray","_","_this2","this","components_Wrapper","components_Title","components_Directions","components_ScoreBoard","components_Card","key","Component","ReactDOM","render","src_App_0","document","getElementById"],"mappings":"gsDAgBeA,MAbf,SAAcC,GACV,OACAC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OAAOC,QAAS,kBAAIL,EAAMM,YAAYN,EAAMO,MACxDN,EAAAC,EAAAC,cAAA,OAAKC,UAAW,iBACZH,EAAAC,EAAAC,cAAA,OAAKK,IAAKR,EAAMS,KAAMC,IAAKV,EAAMW,SAErCV,EAAAC,EAAAC,cAAA,OAAKC,UAAW,WACZH,EAAAC,EAAAC,cAAA,UAAKH,EAAMS,eCARG,MAPf,SAAoBZ,GAChB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eAAeJ,EAAMa,iBCI7BC,MANf,SAAed,GACX,OACIC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMa,iBCKtBE,MAPf,SAAkBf,GACd,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACdJ,EAAMa,wBCKAG,MAPf,SAAoBhB,GAChB,OAEAC,EAAAC,EAAAC,cAAA,kEC8EWc,oNAzEbC,MAAQ,CACNC,WACAC,MAAO,KAGTd,YAAc,SAAAC,GACZ,IAAIc,GAAkB,EACtBC,EAAKC,SAAS,CACZH,MAAOE,EAAKJ,MAAME,MAAQ,IAE5BE,EAAKC,SAAS,CACZJ,SAAUG,EAAKJ,MAAMC,SAASK,IAAI,SAACC,GAOjC,OANIA,EAAIlB,KAAOA,KACO,IAAhBkB,EAAIC,UACNL,GAAkB,GAEpBI,EAAIC,SAAU,GAETD,OAIa,IAApBJ,GACFC,EAAKK,cAELL,EAAKM,aAGTD,YAAc,WACZE,MAAM,uBACNP,EAAKC,SAAS,CACZJ,SAAUG,EAAKJ,MAAMC,SAASK,IAAI,SAACC,GAEjC,OADAA,EAAIC,SAAU,EACPD,IAETL,MAAO,OAGbQ,QAAU,WACR,IAAIE,EAAQR,EAAKJ,MAAMC,SACnBY,EAAeC,IAAEJ,QAAQE,GAC7BR,EAAKC,SAAS,CACZJ,SAAUY,6EAKL,IAAAE,EAAAC,KAEP,OAEEjC,EAAAC,EAAAC,cAACgC,EAAD,KACAlC,EAAAC,EAAAC,cAACiC,EAAD,4BACEnC,EAAAC,EAAAC,cAACkC,EAAD,8CACFpC,EAAAC,EAAAC,cAACmC,EAAD,eACQJ,KAAKhB,MAAME,QAGjBc,KAAKhB,MAAMC,SAASK,IAAI,SAAAL,GAAQ,OAClClB,EAAAC,EAAAC,cAACoC,EAAD,CACAjC,YAAe2B,EAAK3B,YACnBC,GAAIY,EAASZ,GACbiC,IAAKrB,EAASZ,GACdE,KAAMU,EAASV,KACfE,MAAOQ,EAASR,kBAjEH8B,cCNlBC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.b7f4e01c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Card(props) {\n    return (\n    <div className =\"card\" onClick={()=>props.cardClicked(props.id)}>\n        <div className =\"img-container\" >\n            <img alt={props.name} src={props.image}/>\n        </div>\n        <div className =\"content\">\n            <h3>{props.name}</h3>        \n        </div>\n    </div> \n    );\n}\n\nexport default Card;","import React from \"react\";\nimport \"./style.css\";\n\nfunction ScoreBoard(props){\n    return (\n        <div className=\"score-board\">{props.children}\n        </div>\n    )\n}\n\nexport default ScoreBoard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props){\n    return (\n        <h1 className=\"title\">{props.children}</h1>\n    )\n}\n\nexport default Title;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper (props) {\n    return (\n        <div className=\"wrapper\">\n        {props.children}</div>\n    )\n}\n\nexport default Wrapper;","import React from \"react\";\nimport './style.css'\n\n\nfunction Directions(props){\n    return (\n    \n    <h2>Dont pick the same Character Twice!</h2>\n    )\n}\n\nexport default Directions;","import React,{ Component } from 'react';\nimport Card from './components/Card';\nimport ScoreBoard from './components/ScoreBoard'\nimport Title from \"./components/Title\";\nimport Wrapper from \"./components/Wrapper\";\nimport simpsons from './simpsons.json';\nimport Directions from './components/Directions';\nimport _ from 'lodash';\nimport './App.css';\n\n\nclass App extends Component {\n  state = {\n    simpsons,\n    count: 0\n  }\n\n  cardClicked = id => {\n    let simpsonsClicked = false;\n    this.setState({\n      count: this.state.count + 1\n    })\n    this.setState({\n      simpsons: this.state.simpsons.map((sim)=> {\n        if (sim.id === id) {\n          if (sim.clicked === true) {\n            simpsonsClicked = true\n          }\n          sim.clicked = true;\n        }\n        return sim;\n\n      })\n    });\n    if (simpsonsClicked === true) {\n      this.restartGame();\n    }\n      this.shuffle();\n  };\n\n  restartGame = () => {\n    alert(\"Game Over Try Again\")\n    this.setState({\n      simpsons: this.state.simpsons.map((sim)=>{\n        sim.clicked = false;\n        return sim;\n      }),\n      count: 0})\n    }\n\nshuffle = () => {\n  let array = this.state.simpsons;\n  let shuffleArray = _.shuffle(array);\n  this.setState({\n    simpsons: shuffleArray\n  });\n}\n\n\n render(){\n     // Map over this.state.simpsons and render a Card component for each simpson object \n  return ( \n\n    <Wrapper>\n    <Title>Simpsons Clicky Game  \n      <Directions> Dont click the same character twice!</Directions>  \n    <ScoreBoard>\n    Score: {this.state.count}\n    </ScoreBoard>\n    </Title>\n     {this.state.simpsons.map(simpsons => (\n    <Card\n    cardClicked = {this.cardClicked}\n     id={simpsons.id}\n     key={simpsons.id}\n     name={simpsons.name}\n     image={simpsons.image}\n    />\n    ))}\n    </Wrapper>\n \n  )};\n\n     };\n\nexport default App;\n\n\n// This assignment will require you to break up your application's UI into components, manage component state, and respond to user events.\n\n// Instructions\n// Check out the example solution and study the app's basic functionality.\n\n// The application should render different images (of your choice) to the screen. Each image should listen for click events.\n\n// The application should keep track of the user's score. The user's score should be incremented when clicking an image for the first time. The user's score should be reset to 0 if they click the same image more than once.\n\n// Every time an image is clicked, the images rendered to the page should shuffle themselves in a random order.\n\n// Once the user's score is reset after an incorrect guess, the game should restart.\n\n// When complete, the application should be deployed to Github Pages. See the README generated with Create React App for instructions on deploying the application to Github Pages.\n\n// More information can be found below.\n\n// Hints\n// Begin by building a non-functioning static version for your Clicky Game. Then work on making the game interactive.\n\n// Reminder: Submission on BCS\n// Please submit both the deployed GitHub Pages link to your homework AND the link to the Github Repository!\n// Create a README.md\n// Add a README.md to your repository describing the project. Here are some resources for creating your README.md. Here are some resources to help you along the way:\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\n"],"sourceRoot":""}